{"version":3,"sources":["webpack:///./node_modules/ngx-uploader/fesm2015/ngx-uploader.js","webpack:///./src/app/pages/miscellaneous/not-found/not-found.component.html","webpack:///./src/app/guard/auth.guard.ts","webpack:///./src/app/guard/config.ts","webpack:///./src/app/guard/index.ts","webpack:///./src/app/guard/login.guard.ts","webpack:///./src/app/pages/miscellaneous/miscellaneous-routing.module.ts","webpack:///./src/app/pages/miscellaneous/miscellaneous.component.ts","webpack:///./src/app/pages/miscellaneous/miscellaneous.module.ts","webpack:///./src/app/pages/miscellaneous/not-found/not-found.component.scss","webpack:///./src/app/pages/miscellaneous/not-found/not-found.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACS;AACuD;;AAE3G;AACA;AACA,cAAc,uEAAuE;AACrF;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA,iCAAiC,0DAAY;AAC7C,mCAAmC,4CAAO;AAC1C;AACA;AACA;AACA;AACA,kBAAkB,+DAAQ;AAC1B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,yCAAyC,uCAAuC;AAChF;AACA;AACA,SAAS;AACT;AACA,uBAAuB,EAAE;AACzB;AACA,qCAAqC,yCAAyC;AAC9E;AACA,SAAS;AACT,iCAAiC,0BAA0B;AAC3D;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA,mDAAmD,kDAAkD;AACrG;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA,qEAAqE,2BAA2B;AAChG;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA,yDAAyD,iDAAiD;AAC1G;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA,qDAAqD,gCAAgC;AACrF;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA,iDAAiD,8BAA8B;AAC/E;AACA;AACA;AACA;AACA;AACA,iDAAiD,qBAAqB;AACtE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,+CAAU;AAC7B,uBAAuB,EAAE;AACzB;AACA,sBAAsB,+DAAQ;AAC9B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,4BAA4B,+BAA+B;AAC3D,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,+CAAU;AAC7B,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,qBAAqB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gCAAgC;AACnE;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,4BAA4B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2BAA2B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,+CAA+C,EAAE;AACjD,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,4BAA4B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAAY;AAC5C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,wCAAwC,0DAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,uBAAuB;AACvB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA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","file":"default~app-indeks-indeks-module~app-pages-pages-module-es2015.js","sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { mergeMap, finalize } from 'rxjs/operators';\nimport { EventEmitter, Directive, ElementRef, Input, Output, HostListener, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst UploadStatus = {\n    Queue: 0,\n    Uploading: 1,\n    Done: 2,\n    Cancelled: 3,\n};\nUploadStatus[UploadStatus.Queue] = 'Queue';\nUploadStatus[UploadStatus.Uploading] = 'Uploading';\nUploadStatus[UploadStatus.Done] = 'Done';\nUploadStatus[UploadStatus.Cancelled] = 'Cancelled';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} bytes\n * @return {?}\n */\nfunction humanizeBytes(bytes) {\n    if (bytes === 0) {\n        return '0 Byte';\n    }\n    /** @type {?} */\n    const k = 1024;\n    /** @type {?} */\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n    /** @type {?} */\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\nclass NgUploaderService {\n    /**\n     * @param {?=} concurrency\n     * @param {?=} contentTypes\n     * @param {?=} maxUploads\n     */\n    constructor(concurrency = Number.POSITIVE_INFINITY, contentTypes = ['*'], maxUploads = Number.POSITIVE_INFINITY) {\n        this.queue = [];\n        this.serviceEvents = new EventEmitter();\n        this.uploadScheduler = new Subject();\n        this.subs = [];\n        this.contentTypes = contentTypes;\n        this.maxUploads = maxUploads;\n        this.uploadScheduler\n            .pipe(mergeMap(upload => this.startUpload(upload), concurrency))\n            .subscribe(uploadOutput => this.serviceEvents.emit(uploadOutput));\n    }\n    /**\n     * @param {?} incomingFiles\n     * @return {?}\n     */\n    handleFiles(incomingFiles) {\n        /** @type {?} */\n        const allowedIncomingFiles = [].reduce.call(incomingFiles, (acc, checkFile, i) => {\n            /** @type {?} */\n            const futureQueueLength = acc.length + this.queue.length + 1;\n            if (this.isContentTypeAllowed(checkFile.type) && futureQueueLength <= this.maxUploads) {\n                acc = acc.concat(checkFile);\n            }\n            else {\n                /** @type {?} */\n                const rejectedFile = this.makeUploadFile(checkFile, i);\n                this.serviceEvents.emit({ type: 'rejected', file: rejectedFile });\n            }\n            return acc;\n        }, []);\n        this.queue.push(...[].map.call(allowedIncomingFiles, (file, i) => {\n            /** @type {?} */\n            const uploadFile = this.makeUploadFile(file, i);\n            this.serviceEvents.emit({ type: 'addedToQueue', file: uploadFile });\n            return uploadFile;\n        }));\n        this.serviceEvents.emit({ type: 'allAddedToQueue' });\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    initInputEvents(input) {\n        return input.subscribe((event) => {\n            switch (event.type) {\n                case 'uploadFile':\n                    /** @type {?} */\n                    const uploadFileIndex = this.queue.findIndex(file => file === event.file);\n                    if (uploadFileIndex !== -1 && event.file) {\n                        this.uploadScheduler.next({ file: this.queue[uploadFileIndex], event: event });\n                    }\n                    break;\n                case 'uploadAll':\n                    /** @type {?} */\n                    const files = this.queue.filter(file => file.progress.status === UploadStatus.Queue);\n                    files.forEach(file => this.uploadScheduler.next({ file: file, event: event }));\n                    break;\n                case 'cancel':\n                    /** @type {?} */\n                    const id = event.id || null;\n                    if (!id) {\n                        return;\n                    }\n                    /** @type {?} */\n                    const subs = this.subs.filter(sub => sub.id === id);\n                    subs.forEach(sub => {\n                        if (sub.sub) {\n                            sub.sub.unsubscribe();\n                            /** @type {?} */\n                            const fileIndex = this.queue.findIndex(file => file.id === id);\n                            if (fileIndex !== -1) {\n                                this.queue[fileIndex].progress.status = UploadStatus.Cancelled;\n                                this.serviceEvents.emit({ type: 'cancelled', file: this.queue[fileIndex] });\n                            }\n                        }\n                    });\n                    break;\n                case 'cancelAll':\n                    this.subs.forEach(sub => {\n                        if (sub.sub) {\n                            sub.sub.unsubscribe();\n                        }\n                        /** @type {?} */\n                        const file = this.queue.find(uploadFile => uploadFile.id === sub.id);\n                        if (file) {\n                            file.progress.status = UploadStatus.Cancelled;\n                            this.serviceEvents.emit({ type: 'cancelled', file: file });\n                        }\n                    });\n                    break;\n                case 'remove':\n                    if (!event.id) {\n                        return;\n                    }\n                    /** @type {?} */\n                    const i = this.queue.findIndex(file => file.id === event.id);\n                    if (i !== -1) {\n                        /** @type {?} */\n                        const file = this.queue[i];\n                        this.queue.splice(i, 1);\n                        this.serviceEvents.emit({ type: 'removed', file: file });\n                    }\n                    break;\n                case 'removeAll':\n                    if (this.queue.length) {\n                        this.queue = [];\n                        this.serviceEvents.emit({ type: 'removedAll' });\n                    }\n                    break;\n            }\n        });\n    }\n    /**\n     * @param {?} upload\n     * @return {?}\n     */\n    startUpload(upload) {\n        return new Observable(observer => {\n            /** @type {?} */\n            const sub = this.uploadFile(upload.file, upload.event)\n                .pipe(finalize(() => {\n                if (!observer.closed) {\n                    observer.complete();\n                }\n            }))\n                .subscribe(output => {\n                observer.next(output);\n            }, err => {\n                observer.error(err);\n                observer.complete();\n            }, () => {\n                observer.complete();\n            });\n            this.subs.push({ id: upload.file.id, sub: sub });\n        });\n    }\n    /**\n     * @param {?} file\n     * @param {?} event\n     * @return {?}\n     */\n    uploadFile(file, event) {\n        return new Observable(observer => {\n            /** @type {?} */\n            const url = event.url || '';\n            /** @type {?} */\n            const method = event.method || 'POST';\n            /** @type {?} */\n            const data = event.data || {};\n            /** @type {?} */\n            const headers = event.headers || {};\n            /** @type {?} */\n            const xhr = new XMLHttpRequest();\n            /** @type {?} */\n            const time = new Date().getTime();\n            /** @type {?} */\n            let progressStartTime = (file.progress.data && file.progress.data.startTime) || time;\n            /** @type {?} */\n            let speed = 0;\n            /** @type {?} */\n            let eta = null;\n            xhr.upload.addEventListener('progress', (e) => {\n                if (e.lengthComputable) {\n                    /** @type {?} */\n                    const percentage = Math.round((e.loaded * 100) / e.total);\n                    /** @type {?} */\n                    const diff = new Date().getTime() - time;\n                    speed = Math.round(e.loaded / diff * 1000);\n                    progressStartTime = (file.progress.data && file.progress.data.startTime) || new Date().getTime();\n                    eta = Math.ceil((e.total - e.loaded) / speed);\n                    file.progress = {\n                        status: UploadStatus.Uploading,\n                        data: {\n                            percentage: percentage,\n                            speed: speed,\n                            speedHuman: `${humanizeBytes(speed)}/s`,\n                            startTime: progressStartTime,\n                            endTime: null,\n                            eta: eta,\n                            etaHuman: this.secondsToHuman(eta)\n                        }\n                    };\n                    observer.next({ type: 'uploading', file: file });\n                }\n            }, false);\n            xhr.upload.addEventListener('error', (e) => {\n                observer.error(e);\n                observer.complete();\n            });\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState === XMLHttpRequest.DONE) {\n                    /** @type {?} */\n                    const speedAverage = Math.round(file.size / (new Date().getTime() - progressStartTime) * 1000);\n                    file.progress = {\n                        status: UploadStatus.Done,\n                        data: {\n                            percentage: 100,\n                            speed: speedAverage,\n                            speedHuman: `${humanizeBytes(speedAverage)}/s`,\n                            startTime: progressStartTime,\n                            endTime: new Date().getTime(),\n                            eta: eta,\n                            etaHuman: this.secondsToHuman(eta || 0)\n                        }\n                    };\n                    file.responseStatus = xhr.status;\n                    try {\n                        file.response = JSON.parse(xhr.response);\n                    }\n                    catch (e) {\n                        file.response = xhr.response;\n                    }\n                    file.responseHeaders = this.parseResponseHeaders(xhr.getAllResponseHeaders());\n                    observer.next({ type: 'done', file: file });\n                    observer.complete();\n                }\n            };\n            xhr.open(method, url, true);\n            xhr.withCredentials = event.withCredentials ? true : false;\n            try {\n                /** @type {?} */\n                const uploadFile = (/** @type {?} */ (file.nativeFile));\n                /** @type {?} */\n                const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);\n                if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {\n                    observer.complete();\n                }\n                Object.keys(headers).forEach(key => xhr.setRequestHeader(key, headers[key]));\n                /** @type {?} */\n                let bodyToSend;\n                if (event.includeWebKitFormBoundary !== false) {\n                    Object.keys(data).forEach(key => file.form.append(key, data[key]));\n                    file.form.append(event.fieldName || 'file', uploadFile, uploadFile.name);\n                    bodyToSend = file.form;\n                }\n                else {\n                    bodyToSend = uploadFile;\n                }\n                this.serviceEvents.emit({ type: 'start', file: file });\n                xhr.send(bodyToSend);\n            }\n            catch (e) {\n                observer.complete();\n            }\n            return () => {\n                xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} sec\n     * @return {?}\n     */\n    secondsToHuman(sec) {\n        return new Date(sec * 1000).toISOString().substr(11, 8);\n    }\n    /**\n     * @return {?}\n     */\n    generateId() {\n        return Math.random().toString(36).substring(7);\n    }\n    /**\n     * @param {?} contentTypes\n     * @return {?}\n     */\n    setContentTypes(contentTypes) {\n        if (typeof contentTypes !== 'undefined' && contentTypes instanceof Array) {\n            if (contentTypes.find((type) => type === '*') !== undefined) {\n                this.contentTypes = ['*'];\n            }\n            else {\n                this.contentTypes = contentTypes;\n            }\n            return;\n        }\n        this.contentTypes = ['*'];\n    }\n    /**\n     * @return {?}\n     */\n    allContentTypesAllowed() {\n        return this.contentTypes.find((type) => type === '*') !== undefined;\n    }\n    /**\n     * @param {?} mimetype\n     * @return {?}\n     */\n    isContentTypeAllowed(mimetype) {\n        if (this.allContentTypesAllowed()) {\n            return true;\n        }\n        return this.contentTypes.find((type) => type === mimetype) !== undefined;\n    }\n    /**\n     * @param {?} file\n     * @param {?} index\n     * @return {?}\n     */\n    makeUploadFile(file, index) {\n        return {\n            fileIndex: index,\n            id: this.generateId(),\n            name: file.name,\n            size: file.size,\n            type: file.type,\n            form: new FormData(),\n            progress: {\n                status: UploadStatus.Queue,\n                data: {\n                    percentage: 0,\n                    speed: 0,\n                    speedHuman: `${humanizeBytes(0)}/s`,\n                    startTime: null,\n                    endTime: null,\n                    eta: null,\n                    etaHuman: null\n                }\n            },\n            lastModifiedDate: new Date(file.lastModified),\n            sub: undefined,\n            nativeFile: file\n        };\n    }\n    /**\n     * @private\n     * @param {?} httpHeaders\n     * @return {?}\n     */\n    parseResponseHeaders(httpHeaders) {\n        if (!httpHeaders) {\n            return;\n        }\n        return httpHeaders.split('\\n')\n            .map((x) => x.split(/: */, 2))\n            .filter((x) => x[0])\n            .reduce((acc, x) => {\n            acc[x[0]] = x[1];\n            return acc;\n        }, {});\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgFileDropDirective {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n        this.stopEvent = (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n        };\n        this.uploadOutput = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._sub = [];\n        /** @type {?} */\n        const concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n        /** @type {?} */\n        const allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n        /** @type {?} */\n        const maxUploads = this.options && this.options.maxUploads || Number.POSITIVE_INFINITY;\n        this.upload = new NgUploaderService(concurrency, allowedContentTypes, maxUploads);\n        this.el = this.elementRef.nativeElement;\n        this._sub.push(this.upload.serviceEvents.subscribe((event) => {\n            this.uploadOutput.emit(event);\n        }));\n        if (this.uploadInput instanceof EventEmitter) {\n            this._sub.push(this.upload.initInputEvents(this.uploadInput));\n        }\n        this.el.addEventListener('drop', this.stopEvent, false);\n        this.el.addEventListener('dragenter', this.stopEvent, false);\n        this.el.addEventListener('dragover', this.stopEvent, false);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._sub.forEach(sub => sub.unsubscribe());\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    onDrop(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        /** @type {?} */\n        const event = { type: 'drop' };\n        this.uploadOutput.emit(event);\n        this.upload.handleFiles(e.dataTransfer.files);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    onDragOver(e) {\n        if (!e) {\n            return;\n        }\n        /** @type {?} */\n        const event = { type: 'dragOver' };\n        this.uploadOutput.emit(event);\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    onDragLeave(e) {\n        if (!e) {\n            return;\n        }\n        /** @type {?} */\n        const event = { type: 'dragOut' };\n        this.uploadOutput.emit(event);\n    }\n}\nNgFileDropDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngFileDrop]'\n            },] }\n];\n/** @nocollapse */\nNgFileDropDirective.ctorParameters = () => [\n    { type: ElementRef }\n];\nNgFileDropDirective.propDecorators = {\n    options: [{ type: Input }],\n    uploadInput: [{ type: Input }],\n    uploadOutput: [{ type: Output }],\n    onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }],\n    onDragOver: [{ type: HostListener, args: ['dragover', ['$event'],] }],\n    onDragLeave: [{ type: HostListener, args: ['dragleave', ['$event'],] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgFileSelectDirective {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n        this.fileListener = () => {\n            if (this.el.files) {\n                this.upload.handleFiles(this.el.files);\n            }\n        };\n        this.uploadOutput = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._sub = [];\n        /** @type {?} */\n        const concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n        /** @type {?} */\n        const allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n        /** @type {?} */\n        const maxUploads = this.options && this.options.maxUploads || Number.POSITIVE_INFINITY;\n        this.upload = new NgUploaderService(concurrency, allowedContentTypes, maxUploads);\n        this.el = this.elementRef.nativeElement;\n        this.el.addEventListener('change', this.fileListener, false);\n        this._sub.push(this.upload.serviceEvents.subscribe((event) => {\n            this.uploadOutput.emit(event);\n        }));\n        if (this.uploadInput instanceof EventEmitter) {\n            this._sub.push(this.upload.initInputEvents(this.uploadInput));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.el) {\n            this.el.removeEventListener('change', this.fileListener, false);\n            this._sub.forEach(sub => sub.unsubscribe());\n        }\n    }\n}\nNgFileSelectDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngFileSelect]'\n            },] }\n];\n/** @nocollapse */\nNgFileSelectDirective.ctorParameters = () => [\n    { type: ElementRef }\n];\nNgFileSelectDirective.propDecorators = {\n    options: [{ type: Input }],\n    uploadInput: [{ type: Input }],\n    uploadOutput: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxUploaderModule {\n}\nNgxUploaderModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [NgFileDropDirective, NgFileSelectDirective],\n                exports: [NgFileDropDirective, NgFileSelectDirective]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { UploadStatus, NgFileDropDirective, NgFileSelectDirective, humanizeBytes, NgUploaderService, NgxUploaderModule };\n\n//# sourceMappingURL=ngx-uploader.js.map","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-md-12\\\">\\r\\n    <nb-card>\\r\\n      <nb-card-body>\\r\\n        <div class=\\\"flex-centered col-xl-4 col-lg-6 col-md-8 col-sm-12\\\">\\r\\n          <h2 class=\\\"title\\\">404 Page Not Found</h2>\\r\\n          <small class=\\\"sub-title\\\">The page you were looking for doesn't exist</small>\\r\\n          <button nbButton fullWidth (click)=\\\"goToHome()\\\" type=\\\"button\\\" class=\\\"home-button\\\">\\r\\n            Take me home\\r\\n          </button>\\r\\n        </div>\\r\\n      </nb-card-body>\\r\\n    </nb-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Injectable } from \"@angular/core\";\r\nimport {\r\n  Router,\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot\r\n} from \"@angular/router\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n\r\n    let userRole = JSON.parse(localStorage.getItem(\"currentUser.role\"));\r\n    if (localStorage.getItem(\"currentUser\")) {\r\n      if (userRole && userRole.indexOf(state.url) === -1) {\r\n        this.router.navigate([\"/access-denied\"]);\r\n        return false;\r\n      }\r\n      return true;\r\n    } else if (sessionStorage.getItem(\"currentUser\")) {\r\n      if (userRole && userRole.indexOf(state.url) === -1) {\r\n        this.router.navigate([\"/access-denied\"]);\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    // not logged in so redirect to login page with the return url\r\n    this.router.navigate([\"public/login\"]);\r\n    return false;\r\n  }\r\n}\r\n","export class Config {\r\n\tstatic get() {\r\n\t\treturn {\r\n\t\t\tapiBackend: \"/api/\",\r\n\t\t\tpage:1,\r\n\t\t\trows:10\r\n\t\t}\r\n\t}\r\n}\r\n","export * from './auth.guard';\r\nexport * from './login.guard';\r\nexport * from './config';","import { Injectable } from \"@angular/core\";\r\nimport {\r\n  Router,\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot\r\n} from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\n// import { MessageService } from 'primeng/api';\r\nimport { TranslatorService } from \"../service/translator.service\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class LoginGuard implements CanActivate {\r\n  constructor(private router: Router) {}\r\n  konfirmLogout: string;\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    if (localStorage.getItem(\"currentUser\")) {\r\n      // this.messageService.clear();\r\n      // this.messageService.add({key: 't-logout', sticky: true, severity:'warn', summary:this.translate.getTranslate().konfirmLogout, detail:''});\r\n      return false;\r\n    } else if (sessionStorage.getItem(\"currentUser\")) {\r\n      // this.messageService.clear();\r\n      // this.messageService.add({key: 't-logout', sticky: true, severity:'warn', summary:this.translate.getTranslate().konfirmLogout, detail:''});\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { MiscellaneousComponent } from './miscellaneous.component';\r\nimport { NotFoundComponent } from './not-found/not-found.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MiscellaneousComponent,\r\n    children: [\r\n      {\r\n        path: '404',\r\n        component: NotFoundComponent,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class MiscellaneousRoutingModule {\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-miscellaneous',\r\n  template: `\r\n    <router-outlet></router-outlet>\r\n  `,\r\n})\r\nexport class MiscellaneousComponent {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NbButtonModule, NbCardModule } from '@nebular/theme';\r\n\r\nimport { ThemeModule } from '../../@theme/theme.module';\r\nimport { MiscellaneousRoutingModule } from './miscellaneous-routing.module';\r\nimport { MiscellaneousComponent } from './miscellaneous.component';\r\nimport { NotFoundComponent } from './not-found/not-found.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    ThemeModule,\r\n    NbCardModule,\r\n    NbButtonModule,\r\n    MiscellaneousRoutingModule,\r\n  ],\r\n  declarations: [\r\n    MiscellaneousComponent,\r\n    NotFoundComponent,\r\n  ],\r\n})\r\nexport class MiscellaneousModule { }\r\n","module.exports = \".flex-centered {\\n  margin: auto; }\\n\\nnb-card-body {\\n  display: flex; }\\n\\n.title {\\n  text-align: center; }\\n\\n.sub-title {\\n  text-align: center;\\n  display: block;\\n  margin-bottom: 3rem; }\\n\\n.home-button {\\n  margin-bottom: 2rem; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvbWlzY2VsbGFuZW91cy9ub3QtZm91bmQvRTpcXDIwMTlcXGFuZ3VsYXJcXG5neC1hZG1pbi9zcmNcXGFwcFxccGFnZXNcXG1pc2NlbGxhbmVvdXNcXG5vdC1mb3VuZFxcbm90LWZvdW5kLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBWSxFQUFBOztBQUVkO0VBQ0UsYUFBYSxFQUFBOztBQUdmO0VBQ0Usa0JBQWtCLEVBQUE7O0FBR3BCO0VBQ0Usa0JBQWtCO0VBQ2xCLGNBQWM7RUFDZCxtQkFBbUIsRUFBQTs7QUFHckI7RUFDRSxtQkFBbUIsRUFBQSIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL21pc2NlbGxhbmVvdXMvbm90LWZvdW5kL25vdC1mb3VuZC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5mbGV4LWNlbnRlcmVkIHtcclxuICBtYXJnaW46IGF1dG87XHJcbn1cclxubmItY2FyZC1ib2R5IHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG59XHJcblxyXG4udGl0bGUge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuLnN1Yi10aXRsZSB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIG1hcmdpbi1ib3R0b206IDNyZW07XHJcbn1cclxuXHJcbi5ob21lLWJ1dHRvbiB7XHJcbiAgbWFyZ2luLWJvdHRvbTogMnJlbTtcclxufVxyXG4iXX0= */\"","import { NbMenuService } from '@nebular/theme';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-not-found',\r\n  styleUrls: ['./not-found.component.scss'],\r\n  templateUrl: './not-found.component.html',\r\n})\r\nexport class NotFoundComponent {\r\n\r\n  constructor(private menuService: NbMenuService) {\r\n  }\r\n\r\n  goToHome() {\r\n    this.menuService.navigateHome();\r\n  }\r\n}\r\n"],"sourceRoot":""}